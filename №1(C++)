#include <iostream>
#include <cmath>

using namespace std;

// Структура точки на плоскости
struct Point {
    double x;
    double y;
};

// Структура прямой на плоскости
struct Line {
    double a;
    double b;
    double c;
};

// Функция вычисления расстояния от точки до прямой
double distancePointToLine(const Point& point, const Line& line) {
    return abs(line.a * point.x + line.b * point.y + line.c) / sqrt(line.a * line.a + line.b * line.b);
}

// Функция вычисления точки пересечения двух прямых
Point intersectionPoint(const Line& line1, const Line& line2) {
    Point point;
    point.x = (line2.b * line1.c - line1.b * line2.c) / (line1.a * line2.b - line2.a * line1.b);
    point.y = (line2.c * line1.a - line1.c * line2.a) / (line1.b * line2.a - line1.a * line2.b);
    return point;
}

// Функция вычисления расстояния между двумя точками
double distanceBetweenPoints(const Point& point1, const Point& point2) {
    return sqrt((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));
}

// Функция вычисления угла между двумя прямыми
double angleBetweenLines(const Line& line1, const Line& line2) {
    double dotProduct = line1.a * line2.a + line1.b * line2.b;
    double norm1 = sqrt(line1.a * line1.a + line1.b * line1.b);
    double norm2 = sqrt(line2.a * line2.a + line2.b * line2.b);
    double angle = acos(dotProduct / (norm1 * norm2));
    return angle;
}

int main() {
    // Случайным образом генерируем параметры прямых
    Line line1;
    line1.a = rand() % 10 + 1;
    line1.b = rand() % 10 + 1;
    line1.c = rand() % 10 + 1;
    cout << "Первая прямая: " << line1.a << "x + " << line1.b << "y + " << line1.c << " = 0" << endl;

    Line line2;
    line2.a = rand() % 10 + 1;
    line2.b = rand() % 10 + 1;
    line2.c = rand() % 10 + 1;
    cout << "Вторая прямая: " << line2.a << "x + " << line2.b << "y + " << line2.c << " = 0" << endl;

    // Случайным образом генерируем координаты точки
    Point point;
    point.x = rand() % 10 + 1;
    point.y = rand() % 10 + 1;
    cout << "Точка: (" << point.x << ", " << point.y << ")" << endl;

    // Вычисляем расстояния от точки до каждой прямой
    double distance1 = distancePointToLine(point, line1);
    double distance2 = distancePointToLine(point, line2);
    cout << "Расстояние от точки до первой прямой: " << distance1 << endl;
    cout << "Расстояние от точки до второй прямой: " << distance2 << endl;

    // Вычисляем точку пересечения прямых
    Point intersection = intersectionPoint(line1, line2);
    cout << "Точка пересечения прямых: (" << intersection.x << ", " << intersection.y << ")" << endl;

    // Вычисляем расстояние от заданной точки до точки пересечения прямых
    double distanceToPoint = distanceBetweenPoints(point, intersection);
    cout << "Расстояние от заданной точки до точки пересечения прямых: " << distanceToPoint << endl;

    // Вычисляем угол между прямыми
    double angle = angleBetweenLines(line1, line2);
    cout << "Угол между прямыми: " << angle * 180 / M_PI << " градусов" << endl;

    return 0;
}
